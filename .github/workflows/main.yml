# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  lint :
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Lint
        run: ./gradlew lintDebug

      - name: Upload html test report
        uses: actions/upload-artifact@v4
        with:
          name: index.html
          path: app/build/reports/lint-results-debug.html

  unit-test:
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Test
        run: ./gradlew test

      - name: Upload unit-test report
        uses: actions/upload-artifact@v4
        with:
          name: unit_test_report
          path: app/build/reports/test/testDebugUnitTest/

  instrumentation-test:
    needs: [unit-test]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
            distribution: 'temurin'  # atau bisa pakai 'zulu', 'adopt', dll.
            java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build app
        run: ./gradlew assembleDebug assembleAndroidTest

      - name: Run tests
        uses: emulator-wtf/run-tests@v0
        with:
          api-token: ${{ secrets.WTF_EMULATOR_KEY }}
          app: app/build/outputs/apk/debug/app-debug.apk
          test: app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk
          outputs-dir: build/test-results

      - name: Publish test report
        uses: mikepenz/action-junit-report@v2
        if: always()
        with:
          report_paths: 'build/test-results/**/*.xml'
  static-code-analysis:
    needs: [instrumentation-test]
    runs-on: ubuntu-latest
    steps:
      - name: checkout the code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # atau bisa pakai 'zulu', 'adopt', dll.
          java-version: '17'

      - name: sonarCloud Scan
        run: ./gradlew app:sonarqube -Dsonar.login=${{secrets.SONAR_TOKEN}}
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  package:
    needs: [static-code-analysis]
    name: Generate APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build debug APK
        run: ./gradlew assembleDebug --stacktrace

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: news-app.apk
          path: app/build/outputs/apk/debug/app-debug.apk

  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6

      - name: Install bundle
        run: |
            bundle config path vendor/bundle
            bundle install --jobs 4 --retry 3  

      - name: Create Google Play Service Account Key file
        uses: timheuer/base64-to-file@v1
        id: service_account_json_file
        with:
          fileName: "service-json.json"
          encodedString: ${{ secrets.GPLAY_SERVICE_ACCOUNT_KEY }}

      - name: Create Keystore file
        uses: timheuer/base64-to-file@v1
        id: android_keystore
        with:
          fileName: "android_keystore.keystore"
          encodedString: ${{ secrets.KEYSTORE_FILE }}

      - name: Deploy Android release
        run: bundle exec fastlane android deploy
        env:
          STAGING_PACKAGE_NAME: ${{ secrets.STAGING_PACKAGE_NAME }}
          STAGING_KEYSTORE_FILE: ${{ steps.android_keystore.outputs.filePath }}
          STAGING_KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          STAGING_KEY_ALIAS: ${{ secrets.KEY_ALIAS}}
          STAGING_KEY_PASSWORD: ${{ secrets.STAGING_KEY_PASSWORD }}
          GPLAY_SERVICE_ACCOUNT_KEY: ${{ steps.service_account_json_file.outputs.filePath }}
